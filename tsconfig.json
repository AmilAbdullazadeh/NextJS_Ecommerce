{
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@api": ["api"],
      "@components": ["components"],
      "@core": ["core"],
      "@hooks":["hooks"],
      "@store/*":["store/*"],
      "@styles":["styles"],
      "@testUtils": ["testUtils"],
      "@utils": ["utils"],
      "@pages/*":["pages/*"]
    },
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "types": ["jest", "node", "@testing-library/jest-dom"],
    "allowJs": true, // Allow JavaScript files to be imported inside your project
    "skipLibCheck": true, // Skip type checking of declaration files. This can save time during compilation at the expense of type-system accuracy. For example, two libraries could define two copies of the same type in an inconsistent way.
    "esModuleInterop": true, // fixes improts errors that are present due to differences between how typescript handles imports and the import spec's recommendations. https://www.typescriptlang.org/tsconfig#compilerOptions
    "allowSyntheticDefaultImports": true, // allows imports like: import React from 'react' instead of import * as React from 'react'
    "strict": true,
    "forceConsistentCasingInFileNames": true, //TypeScript follows the case sensitivity rules of the file system it’s running on. This can be problematic if some developers are working in a case-sensitive file system and others aren’t.
    "noFallthroughCasesInSwitch": true, //Ensures that any non-empty case inside a switch statement includes either break or return.
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true, // Allows importing modules with a ‘.json’ extension, which is a common practice in node projects.
    "isolatedModules": true, // Setting the isolatedModules flag tells TypeScript to warn you if you write certain code that can’t be correctly interpreted by a single-file transpilation process.
    "noEmit": false, // Do not emit compiler output files like JavaScript source code, source-maps or declarations. This makes room for another tool like Babel, or swc to handle converting the TypeScript file to a file which can run inside a JavaScript environment.
    //You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.
    "jsx": "preserve"
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "setupTests.js"
  ]
}
